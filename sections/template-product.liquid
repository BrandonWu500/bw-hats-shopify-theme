<!--
  example requires some changes to your config:

  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/typography'),
      require('@tailwindcss/aspect-ratio'),
    ],
  }
  ```
-->
<div class='mx-auto max-w-7xl p-4 sm:p-6 lg:p-8'>
  <div class='lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8'>
    <!-- Image gallery -->
    <div class='flex flex-col-reverse'>
      {% if product.images.size > 1 %}
        <!-- Image selector -->
        <div class='mx-auto mt-6 hidden w-full max-w-2xl sm:block lg:max-w-none'>
          <div
            class='grid grid-cols-4 gap-6'
            aria-orientation='horizontal'
            role='tablist'
          >
            {% for image in product.images %}
              <button
                id='tab-{{ forloop.index0 }}'
                class='gallery-tab relative flex h-32 cursor-pointer items-center justify-center rounded-md bg-white text-sm font-medium uppercase text-slate-700 hover:bg-slate-50 focus:outline-none focus:ring-offset-4 focus:ring-orange-200 focus:ring-[6px]'
                role='tab'
                type='button'
                data-image-srcset='
                  {{ image | image_url: width: 400 }} 400w,
                  {{ image | image_url: width: 800 }} 800w
                '
                data-image-src='{{ image | image_url: width: 800 }}'
              >
                <span class='sr-only'>Alternate view</span>
                <span class='absolute inset-0 overflow-hidden rounded-md'>
                  <img
                    src='{{ image | image_url: width: 200, height: 200 }}'
                    alt='{{ image.alt | escape }}'
                    class='h-full w-full object-cover hover:opacity-75'
                    loading='lazy'
                    width='{{ image.width }}'
                    height='{{ image.height }}'
                  >
                </span>
                <!--
                  Selected: "ring-orange-200", Not Selected: "ring-transparent"
                -->

                <span
                  id='gallery-tab-border'
                  class='
                    {% if product.selected_or_first_available_variant.featured_image == image %}
                      ring-orange-300
                      {% else %}
                      ring-transparent
                    {% endif %}
                     pointer-events-none absolute inset-0 rounded-md ring-4 ring-offset-2
                  '
                  aria-hidden='true'
                ></span>
              </button>
            {% endfor %}
          </div>
        </div>
      {% endif %}

      <div class='aspect-h-1 aspect-w-1 w-full'>
        <!-- Tab panel, show/hide based on tab state. -->
        <div
          role='tabpanel'
          tabindex='0'
          id='panel-{{ forloop.index0 }}'
        >
          {% if product.selected_or_first_available_variant.featured_image %}
            {% assign featured = product.selected_or_first_available_variant.featured_image %}
          {% else %}
            {% assign featured = product.featured_image %}
          {% endif %}
          <img
            srcset='
              {{ featured | image_url: width: 400 }} 400w,
              {{ featured | image_url: width: 800 }} 800w
            '
            src='{{ featured |  image_url: width: 800 }}'
            alt='{{ featured.alt }}'
            sizes='
              (max-width: 425px) 400px,
              800px
            '
            width='{{ featured.width }}'
            height='{{ featured.height }}'
            class='h-full w-full object-cover object-center rounded-lg'
            id='product-image'
          >
        </div>
      </div>
    </div>

    <!-- Product info -->
    <div class='mt-10 px-0.5 sm:mt-16 sm:px-6 lg:px-0 lg:mt-0 mx-auto max-w-2xl lg:max-w-7xl'>
      <h1 class='text-5xl xl:text-7xl font-semibold font-heading tracking-tight text-slate-700'>
        {{ product.title }}
      </h1>

      <div class='mt-3'>
        <h2 class='sr-only'>Product information</h2>
        <p class='text-3xl tracking-tight text-slate-700' id='product-price'>
          {{ product.selected_or_first_available_variant.price | money }}
        </p>
      </div>

      <div class='mt-6'>
        <h3 class='sr-only'>Description</h3>

        <div class='space-y-6 text-base text-slate-600'>
          {% render 'prose', content: product.content %}
        </div>
      </div>

      {% form 'product', product, class: 'mt-6', id: 'product-form' %}
        <input
          type='hidden'
          name='id'
          id='product-id'
          value='{{ product.selected_or_first_available_variant.id }}'
          data-url='{{ product.url }}'
        >

        {% unless product.has_only_default_variant %}
          <div class='product-option'>
            {%- liquid
              assign variants_available_arr = product.variants | map: 'available'
              assign variants_option1_arr = product.variants | map: 'option1'
              assign variants_option2_arr = product.variants | map: 'option2'
              assign variants_option3_arr = product.variants | map: 'option3'
            -%}
            {%- for option in product.options_with_values -%}
              <fieldset class='flex flex-col gap-4 mt-8'>
                <legend class='text-sm font-medium text-slate-700 mb-2'>
                  {{ option.name }}
                </legend>
                <div class='grid grid-cols-3 gap-3 sm:grid-cols-6'>
                  {% for value in option.values %}
                    {%- liquid
                      assign option_disabled = true

                      for option1_name in variants_option1_arr
                        case option.position
                          when 1
                            if variants_option1_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                              assign option_disabled = false
                            endif
                          when 2
                            if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                              assign option_disabled = false
                            endif
                          when 3
                            if option1_name == product.selected_or_first_available_variant.option1 and variants_option2_arr[forloop.index0] == product.selected_or_first_available_variant.option2 and variants_option3_arr[forloop.index0] == value and variants_available_arr[forloop.index0]
                              assign option_disabled = false
                            endif
                        endcase
                      endfor
                    -%}
                    <div class='relative'>
                      <input
                        {% if option.selected_value == value %}
                          checked
                        {% endif %}
                        type='radio'
                        name='{{ option.name }}'
                        value='{{ value | escape }}'
                        id='{{ option.name |  handleize }}-{{ value |  handleize }}'
                        {% if option_disabled %}
                          disabled
                        {% endif %}
                        class='sr-only peer'
                      >
                      <label
                        for='{{ option.name |  handleize }}-{{ value |  handleize }}'
                        class='
                          flex items-center justify-center rounded-md border py-3 px-3 capitalize sm:flex-1 cursor-pointer focus:outline-none peer-checked:border-transparent
                          border-slate-200 bg-white text-slate-700 hover:bg-slate-50 peer-checked:bg-orange-200 peer-checked:text-slate-600 peer-checked:hover:bg-orange-300
                          peer-disabled:opacity-25 peer-disabled:cursor-not-allowed
                        '
                      >
                        {{- value -}}
                      </label>
                    </div>
                  {% endfor %}
                </div>
              </fieldset>
            {%- endfor -%}
          </div>
        {% endunless %}
        <div class='mt-10 flex gap-8'>
          {% comment %} Quantity Select {% endcomment %}
          {% if product.selected_or_first_available_variant.available %}
            <div>
              <label for='product-page-variant-quantity' class='sr-only'
                >Quantity,
                {{
                  product.selected_or_first_available_variant.title
                  | escape
                -}}
              </label>
              <select
                id='product-page-variant-quantity'
                name='quantity'
                class='quantity-select h-full max-w-full rounded-md border border-slate-300 py-1.5 text-left text-lg font-medium leading-5 text-slate-600 shadow-sm focus:border-orange-200 focus:outline-none focus:ring-1 focus:ring-orange-200'
              >
                {% assign num = product.selected_or_first_available_variant.inventory_quantity %}
                {% assign range = (1..num) %}
                {% for i in range %}
                  <option
                    value='{{ i }}'
                  >
                    {{ i }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endif %}
          {% comment %} Add to bag button {% endcomment %}
          <button
            {% unless product.selected_or_first_available_variant.available %}
              disabled
            {% endunless %}
            type='submit'
            id='add-to-cart'
            class='add-to-cart flex max-w-xs flex-1 items-center justify-center rounded-md border border-transparent bg-orange-200 px-8 py-3 text-xl font-semibold font-heading capitalize text-slate-600 hover:bg-orange-300 focus:outline-none focus:ring-2 focus:ring-orange-200 focus:ring-offset-2 focus:ring-offset-slate-50 sm:w-full disabled:opacity-50 disabled:cursor-not-allowed disabled:text-slate-700 disabled:hover:bg-orange-200'
          >
            {% render 'loading-spinner' %}
            <p>
              {% if product.selected_or_first_available_variant.available %}
                Add to bag
              {% else %}
                Out of stock
              {% endif %}
            </p>
          </button>
        </div>
        {% comment %}
          <p
            id='item-in-cart-info'
            class='hidden mt-4 text-lg text-slate-500'
          >
            You can update the item quantity or remove the item from your cart on
            the cart page.
          </p>
        {% endcomment %}
      {% endform %}
    </div>
  </div>
</div>

<script>
  const product = {{ product | json }}
  const cart = {{ cart | json }}
  const { options, variants } = product
  

  const selectedOptions = []

      const checkedInputs = document.querySelectorAll('.product-option input[type="radio"]:checked')
      checkedInputs.forEach((checked) => (
        selectedOptions.push(checked.value)
      ))

      const matchedVariant = variants.find(variant => {
        let pass = true;

        for (let i = 0; i < selectedOptions.length; i++) {
          if (selectedOptions.indexOf(variant.options[i]) === -1) {
            pass = false;
            break;
          }
        }

        return pass;
      })

      if (matchedVariant?.id) {
        const currentVariantInCart = cart.items.find((item) => item.variant_id === matchedVariant.id)
        if (currentVariantInCart) {
          document.querySelector('#product-page-variant-quantity').parentElement.classList.add('hidden')
          const addToCartButton = document.querySelector('#add-to-cart')
          addToCartButton.textContent = 'Item in bag'
          addToCartButton.disabled = true

          // const itemInCartInfo = document.querySelector('#item-in-cart-info')
          // itemInCartInfo.classList.remove('hidden')
        }
      }



  // const combinations = variants.map((variant) => ({
  //   id: variant.id,
  //   avaiable: variant.avaiable,
  //   // Adds key / value pairs for each variant (ie. "color": "Black" and "size": 'M").
  //   ...variant.options.reduce(
  //     (accumulator, option) => ({
  //       ...accumulator,
  //       [option.toLowerCase()]: variant.value,
  //     }),
  //     {}
  //   ),
  // }));
  // const defaultCheckedInputs = document.querySelectorAll('.product-option input[type="radio"]:checked')
  // defaultCheckedInputs.forEach((input) => {
  //   input.parentElement.classList.add('ring-2', 'ring-orange-200', 'ring-offset-2')
  // })

  const radioInputs = document.querySelectorAll('.product-option input[type="radio"]')
  radioInputs.forEach((radio) => {
    // const {option, value} = radio
    // const isAvailableForSale = combinations.find((combination) =>
    //   combinations.entries(
    //     ([key, value]) =>
    //       combination[key] === value && combination.avaiable
    //   )
    // );
    // if (!isAvailableForSale) {
    //   radio.disabled = true
    // }


    radio.addEventListener('change', () => {
      const selectedOptions = []

      const checkedInputs = document.querySelectorAll('.product-option input[type="radio"]:checked')
      checkedInputs.forEach((checked) => (
        selectedOptions.push(checked.value)
      ))

      const matchedVariant = variants.find(variant => {
        let pass = true;

        for (let i = 0; i < selectedOptions.length; i++) {
          if (selectedOptions.indexOf(variant.options[i]) === -1) {
            pass = false;
            break;
          }
        }

        return pass;
      })

      const addToCartButton = document.querySelector('#add-to-cart')
      const priceEl = document.querySelector('#product-price')

      if (!matchedVariant?.id) {
        addToCartButton.textContent = 'Unavailable'
        addToCartButton.disabled = true
        priceEl.classList.add('hidden')
        return
      } else {
        const hiddenInput = document.querySelector('#product-id')
        hiddenInput.value = matchedVariant.id
        window.history.replaceState({}, '', `${hiddenInput.dataset.url}?variant=${matchedVariant.id}`)
        priceEl.textContent = formatPrice(matchedVariant.price)

        const currentVariantInCart = cart.items.find((item) => item.variant_id === matchedVariant.id)
        
        if (currentVariantInCart) {
          document.querySelector('#product-page-variant-quantity').parentElement.classList.add('hidden')
          const addToCartButton = document.querySelector('#add-to-cart')
          addToCartButton.textContent = 'Item in bag'
          addToCartButton.disabled = true

          // const itemInCartInfo = document.querySelector('#item-in-cart-info')
          // itemInCartInfo.classList.remove('hidden')
        }

      }

      if (matchedVariant.featured_image) {
        document.querySelector('#product-image').setAttribute('src', matchedVariant.featured_image.src)
      }


      if (matchedVariant.available) {
        addToCartButton.textContent = 'Add to cart'
        addToCartButton.disabled = false
      } else {
        addToCartButton.textContent = 'Out of stock'
        addToCartButton.disabled = true
      }

      // Refreshes page without hard reloading, but still causes image to flicker
      // window.location = window.location

      // This seems to be the better method, and more similar to what Amazon does
      // Only do this if want to update product.selected_variant on every variant change
      window.location.reload()

      // NEED TO DO THIS WHEN HAVE MULTIPLE OPTIONS
      // OTHERWISE WILL LOCK OUT CERTAIN VARAINTS UNLESS RELOAD PAGE

      // Can also just use single option called varaints 
      // and have it be a combo of options: like Blue / Adult

      // or create a different product entirely if it's different brands
      // For example: google and apple shouldn't be options for the same product
    })
  })

  const galleryTabs = document.querySelectorAll('.gallery-tab')
  const productImage =  document.querySelector('#product-image')
  galleryTabs.forEach((tab) => (
    tab.addEventListener(('click'), () => {
      const imageSrcset = tab.dataset.imageSrcset
      const imageSrc = tab.dataset.imageSrc

      productImage.setAttribute('srcset', imageSrcset)
      productImage.setAttribute('src', imageSrc)
      productImage.setAttribute('alt', tab.querySelector('img').getAttribute('alt'))
    })
  ))



  // document.querySelector('#buy-it-now').addEventListener('click', (e) => {
  //   e.preventDefault()

  //   const input = document.createElement('input')
  //   input.value = '/checkout'
  //   input.type = 'hidden'
  //   input.name = 'return_to'

  //   const form = querySelector('#product-form')
  //   form.appendChild(input)
  //   form.submit()
  // })
</script>

{%- liquid
  if product.selected_or_first_available_variant.featured_media
    assign seo_media = product.selected_or_first_available_variant.featured_media
  else
    assign seo_media = product.featured_media
  endif
-%}

<script type='application/ld+json'>
  {
    "@context": "http://schema.org/",
    "@type": "Product",
    "name": {{ product.title | json }},
    "url": {{ request.origin | append: product.url | json }},
    {% if seo_media -%}
      "image": [
        {{ seo_media | image_url: width: 1920 | prepend: "https:" | json }}
      ],
    {%- endif %}
    "description": {{ product.description | strip_html | json }},
    {% if product.selected_or_first_available_variant.sku != blank -%}
      "sku": {{ product.selected_or_first_available_variant.sku | json }},
    {%- endif %}
    "brand": {
      "@type": "Brand",
      "name": {{ product.vendor | json }}
    },
    "offers": [
      {%- for variant in product.variants -%}
        {
          "@type" : "Offer",
          {%- if variant.sku != blank -%}
            "sku": {{ variant.sku | json }},
          {%- endif -%}
          {%- if variant.barcode.size == 12 -%}
            "gtin12": {{ variant.barcode }},
          {%- endif -%}
          {%- if variant.barcode.size == 13 -%}
            "gtin13": {{ variant.barcode }},
          {%- endif -%}
          {%- if variant.barcode.size == 14 -%}
            "gtin14": {{ variant.barcode }},
          {%- endif -%}
          "availability" : "http://schema.org/{% if variant.available %}InStock{% else %}OutOfStock{% endif %}",
          "price" : {{ variant.price | divided_by: 100.00 | json }},
          "priceCurrency" : {{ cart.currency.iso_code | json }},
          "url" : {{ request.origin | append: variant.url | json }}
        }{% unless forloop.last %},{% endunless %}
      {%- endfor -%}
    ]
  }
</script>

{% schema %}
{
  "name": "Product"
}
{% endschema %}
